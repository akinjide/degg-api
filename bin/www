#!/usr/bin/env node

import http from 'http';
import app from '../index';
import debugModule from 'debug';

const debug = debugModule('degg-api:server');


/**
  * Normalize a port into a number, string, or false.
  * @private
  */
const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
	* Event listener for HTTP server "error" event.
	* @private
	*/
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
	* Event listener for HTTP server "listening" event.
	* @private
	*/
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;

  debug(`Listening on ${bind}`);
}


const port = normalizePort(process.env.PORT || '3000');

/**
  * create HTTP Server
  * @private
  */
const server = http.createServer(app.callback());

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
logger.info(`${app.name} Application started on * ${port}`);